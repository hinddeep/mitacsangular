{"ast":null,"code":"import { EmptyError } from '../util/EmptyError';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function throwIfEmpty(errorFactory = defaultErrorFactory) {\n  return operate((source, subscriber) => {\n    let hasValue = false;\n    source.subscribe(new OperatorSubscriber(subscriber, value => {\n      hasValue = true;\n      subscriber.next(value);\n    }, () => hasValue ? subscriber.complete() : subscriber.error(errorFactory())));\n  });\n}\nfunction defaultErrorFactory() {\n  return new EmptyError();\n}","map":{"version":3,"names":["EmptyError","operate","OperatorSubscriber","throwIfEmpty","errorFactory","defaultErrorFactory","source","subscriber","hasValue","subscribe","value","next","complete","error"],"sources":["/Users/hinddeeppurohit/Documents/MitacsAngular/node_modules/rxjs/dist/esm/internal/operators/throwIfEmpty.js"],"sourcesContent":["import { EmptyError } from '../util/EmptyError';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function throwIfEmpty(errorFactory = defaultErrorFactory) {\n    return operate((source, subscriber) => {\n        let hasValue = false;\n        source.subscribe(new OperatorSubscriber(subscriber, (value) => {\n            hasValue = true;\n            subscriber.next(value);\n        }, () => (hasValue ? subscriber.complete() : subscriber.error(errorFactory()))));\n    });\n}\nfunction defaultErrorFactory() {\n    return new EmptyError();\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,oBAAoB;AAC/C,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,kBAAkB,QAAQ,sBAAsB;AACzD,OAAO,SAASC,YAAY,CAACC,YAAY,GAAGC,mBAAmB,EAAE;EAC7D,OAAOJ,OAAO,CAAC,CAACK,MAAM,EAAEC,UAAU,KAAK;IACnC,IAAIC,QAAQ,GAAG,KAAK;IACpBF,MAAM,CAACG,SAAS,CAAC,IAAIP,kBAAkB,CAACK,UAAU,EAAGG,KAAK,IAAK;MAC3DF,QAAQ,GAAG,IAAI;MACfD,UAAU,CAACI,IAAI,CAACD,KAAK,CAAC;IAC1B,CAAC,EAAE,MAAOF,QAAQ,GAAGD,UAAU,CAACK,QAAQ,EAAE,GAAGL,UAAU,CAACM,KAAK,CAACT,YAAY,EAAE,CAAE,CAAC,CAAC;EACpF,CAAC,CAAC;AACN;AACA,SAASC,mBAAmB,GAAG;EAC3B,OAAO,IAAIL,UAAU,EAAE;AAC3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}