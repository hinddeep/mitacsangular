{"ast":null,"code":"import { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function repeat(count = Infinity) {\n  return count <= 0 ? () => EMPTY : operate((source, subscriber) => {\n    let soFar = 0;\n    let innerSub;\n    const subscribeForRepeat = () => {\n      let syncUnsub = false;\n      innerSub = source.subscribe(new OperatorSubscriber(subscriber, undefined, () => {\n        if (++soFar < count) {\n          if (innerSub) {\n            innerSub.unsubscribe();\n            innerSub = null;\n            subscribeForRepeat();\n          } else {\n            syncUnsub = true;\n          }\n        } else {\n          subscriber.complete();\n        }\n      }));\n      if (syncUnsub) {\n        innerSub.unsubscribe();\n        innerSub = null;\n        subscribeForRepeat();\n      }\n    };\n    subscribeForRepeat();\n  });\n}","map":{"version":3,"names":["EMPTY","operate","OperatorSubscriber","repeat","count","Infinity","source","subscriber","soFar","innerSub","subscribeForRepeat","syncUnsub","subscribe","undefined","unsubscribe","complete"],"sources":["/Users/hinddeeppurohit/Documents/MitacsAngular/node_modules/rxjs/dist/esm/internal/operators/repeat.js"],"sourcesContent":["import { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function repeat(count = Infinity) {\n    return count <= 0\n        ? () => EMPTY\n        : operate((source, subscriber) => {\n            let soFar = 0;\n            let innerSub;\n            const subscribeForRepeat = () => {\n                let syncUnsub = false;\n                innerSub = source.subscribe(new OperatorSubscriber(subscriber, undefined, () => {\n                    if (++soFar < count) {\n                        if (innerSub) {\n                            innerSub.unsubscribe();\n                            innerSub = null;\n                            subscribeForRepeat();\n                        }\n                        else {\n                            syncUnsub = true;\n                        }\n                    }\n                    else {\n                        subscriber.complete();\n                    }\n                }));\n                if (syncUnsub) {\n                    innerSub.unsubscribe();\n                    innerSub = null;\n                    subscribeForRepeat();\n                }\n            };\n            subscribeForRepeat();\n        });\n}\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,qBAAqB;AAC3C,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,kBAAkB,QAAQ,sBAAsB;AACzD,OAAO,SAASC,MAAM,CAACC,KAAK,GAAGC,QAAQ,EAAE;EACrC,OAAOD,KAAK,IAAI,CAAC,GACX,MAAMJ,KAAK,GACXC,OAAO,CAAC,CAACK,MAAM,EAAEC,UAAU,KAAK;IAC9B,IAAIC,KAAK,GAAG,CAAC;IACb,IAAIC,QAAQ;IACZ,MAAMC,kBAAkB,GAAG,MAAM;MAC7B,IAAIC,SAAS,GAAG,KAAK;MACrBF,QAAQ,GAAGH,MAAM,CAACM,SAAS,CAAC,IAAIV,kBAAkB,CAACK,UAAU,EAAEM,SAAS,EAAE,MAAM;QAC5E,IAAI,EAAEL,KAAK,GAAGJ,KAAK,EAAE;UACjB,IAAIK,QAAQ,EAAE;YACVA,QAAQ,CAACK,WAAW,EAAE;YACtBL,QAAQ,GAAG,IAAI;YACfC,kBAAkB,EAAE;UACxB,CAAC,MACI;YACDC,SAAS,GAAG,IAAI;UACpB;QACJ,CAAC,MACI;UACDJ,UAAU,CAACQ,QAAQ,EAAE;QACzB;MACJ,CAAC,CAAC,CAAC;MACH,IAAIJ,SAAS,EAAE;QACXF,QAAQ,CAACK,WAAW,EAAE;QACtBL,QAAQ,GAAG,IAAI;QACfC,kBAAkB,EAAE;MACxB;IACJ,CAAC;IACDA,kBAAkB,EAAE;EACxB,CAAC,CAAC;AACV"},"metadata":{},"sourceType":"module","externalDependencies":[]}