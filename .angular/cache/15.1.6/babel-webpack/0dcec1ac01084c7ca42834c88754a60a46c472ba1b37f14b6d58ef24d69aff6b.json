{"ast":null,"code":"import { Observable } from '../Observable';\nimport { innerFrom } from '../observable/innerFrom';\nimport { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function groupBy(keySelector, elementOrOptions, duration, connector) {\n  return operate((source, subscriber) => {\n    let element;\n    if (!elementOrOptions || typeof elementOrOptions === 'function') {\n      element = elementOrOptions;\n    } else {\n      ({\n        duration,\n        element,\n        connector\n      } = elementOrOptions);\n    }\n    const groups = new Map();\n    const notify = cb => {\n      groups.forEach(cb);\n      cb(subscriber);\n    };\n    const handleError = err => notify(consumer => consumer.error(err));\n    const groupBySourceSubscriber = new GroupBySubscriber(subscriber, value => {\n      try {\n        const key = keySelector(value);\n        let group = groups.get(key);\n        if (!group) {\n          groups.set(key, group = connector ? connector() : new Subject());\n          const grouped = createGroupedObservable(key, group);\n          subscriber.next(grouped);\n          if (duration) {\n            const durationSubscriber = new OperatorSubscriber(group, () => {\n              group.complete();\n              durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();\n            }, undefined, undefined, () => groups.delete(key));\n            groupBySourceSubscriber.add(innerFrom(duration(grouped)).subscribe(durationSubscriber));\n          }\n        }\n        group.next(element ? element(value) : value);\n      } catch (err) {\n        handleError(err);\n      }\n    }, () => notify(consumer => consumer.complete()), handleError, () => groups.clear());\n    source.subscribe(groupBySourceSubscriber);\n    function createGroupedObservable(key, groupSubject) {\n      const result = new Observable(groupSubscriber => {\n        groupBySourceSubscriber.activeGroups++;\n        const innerSub = groupSubject.subscribe(groupSubscriber);\n        return () => {\n          innerSub.unsubscribe();\n          --groupBySourceSubscriber.activeGroups === 0 && groupBySourceSubscriber.teardownAttempted && groupBySourceSubscriber.unsubscribe();\n        };\n      });\n      result.key = key;\n      return result;\n    }\n  });\n}\nclass GroupBySubscriber extends OperatorSubscriber {\n  constructor() {\n    super(...arguments);\n    this.activeGroups = 0;\n    this.teardownAttempted = false;\n  }\n  unsubscribe() {\n    this.teardownAttempted = true;\n    this.activeGroups === 0 && super.unsubscribe();\n  }\n}","map":{"version":3,"names":["Observable","innerFrom","Subject","operate","OperatorSubscriber","groupBy","keySelector","elementOrOptions","duration","connector","source","subscriber","element","groups","Map","notify","cb","forEach","handleError","err","consumer","error","groupBySourceSubscriber","GroupBySubscriber","value","key","group","get","set","grouped","createGroupedObservable","next","durationSubscriber","complete","unsubscribe","undefined","delete","add","subscribe","clear","groupSubject","result","groupSubscriber","activeGroups","innerSub","teardownAttempted","constructor","arguments"],"sources":["/Users/hinddeeppurohit/Documents/MitacsAngular/node_modules/rxjs/dist/esm/internal/operators/groupBy.js"],"sourcesContent":["import { Observable } from '../Observable';\nimport { innerFrom } from '../observable/innerFrom';\nimport { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function groupBy(keySelector, elementOrOptions, duration, connector) {\n    return operate((source, subscriber) => {\n        let element;\n        if (!elementOrOptions || typeof elementOrOptions === 'function') {\n            element = elementOrOptions;\n        }\n        else {\n            ({ duration, element, connector } = elementOrOptions);\n        }\n        const groups = new Map();\n        const notify = (cb) => {\n            groups.forEach(cb);\n            cb(subscriber);\n        };\n        const handleError = (err) => notify((consumer) => consumer.error(err));\n        const groupBySourceSubscriber = new GroupBySubscriber(subscriber, (value) => {\n            try {\n                const key = keySelector(value);\n                let group = groups.get(key);\n                if (!group) {\n                    groups.set(key, (group = connector ? connector() : new Subject()));\n                    const grouped = createGroupedObservable(key, group);\n                    subscriber.next(grouped);\n                    if (duration) {\n                        const durationSubscriber = new OperatorSubscriber(group, () => {\n                            group.complete();\n                            durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();\n                        }, undefined, undefined, () => groups.delete(key));\n                        groupBySourceSubscriber.add(innerFrom(duration(grouped)).subscribe(durationSubscriber));\n                    }\n                }\n                group.next(element ? element(value) : value);\n            }\n            catch (err) {\n                handleError(err);\n            }\n        }, () => notify((consumer) => consumer.complete()), handleError, () => groups.clear());\n        source.subscribe(groupBySourceSubscriber);\n        function createGroupedObservable(key, groupSubject) {\n            const result = new Observable((groupSubscriber) => {\n                groupBySourceSubscriber.activeGroups++;\n                const innerSub = groupSubject.subscribe(groupSubscriber);\n                return () => {\n                    innerSub.unsubscribe();\n                    --groupBySourceSubscriber.activeGroups === 0 &&\n                        groupBySourceSubscriber.teardownAttempted &&\n                        groupBySourceSubscriber.unsubscribe();\n                };\n            });\n            result.key = key;\n            return result;\n        }\n    });\n}\nclass GroupBySubscriber extends OperatorSubscriber {\n    constructor() {\n        super(...arguments);\n        this.activeGroups = 0;\n        this.teardownAttempted = false;\n    }\n    unsubscribe() {\n        this.teardownAttempted = true;\n        this.activeGroups === 0 && super.unsubscribe();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}