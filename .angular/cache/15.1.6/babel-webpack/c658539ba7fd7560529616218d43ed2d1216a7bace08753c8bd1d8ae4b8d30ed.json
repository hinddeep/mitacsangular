{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nexport class AnalogClockComponent {\n  setInterval() {}\n}\nAnalogClockComponent.ɵfac = function AnalogClockComponent_Factory(t) {\n  return new (t || AnalogClockComponent)();\n};\nAnalogClockComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AnalogClockComponent,\n  selectors: [[\"app-analog-clock\"]],\n  decls: 4,\n  vars: 3,\n  consts: [[\"id\", \"clockContainer\"], [\"id\", \"hour\", 3, \"ngStyle\"], [\"id\", \"minute\", 3, \"ngStyle\"], [\"id\", \"second\", 3, \"ngStyle\"]],\n  template: function AnalogClockComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelement(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngStyle\", ctx.hourHandStyle);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngStyle\", ctx.minuteHandStyle);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngStyle\", ctx.secondHandStyle);\n    }\n  },\n  dependencies: [i1.NgStyle],\n  styles: [\"#clockContainer[_ngcontent-%COMP%]{position:relative;margin:auto;height:20vw;width:20vw;background:black;background-size:100%;border-radius:50%}#hour[_ngcontent-%COMP%], #minute[_ngcontent-%COMP%], #second[_ngcontent-%COMP%]{position:absolute;background:red;border-radius:10px;transform-origin:bottom;width:1%;height:40%;top:9%;left:49.25%;opacity:.8}#hour[_ngcontent-%COMP%]{position:absolute;background:red;border-radius:10px;transform-origin:bottom;width:1.8%;height:25%;top:25%;left:48.85%;opacity:.8}#minute[_ngcontent-%COMP%]{position:absolute;background:grey;border-radius:10px;transform-origin:bottom;width:1.6%;height:30%;top:19%;left:48.9%;opacity:.8}#hour[_ngcontent-%COMP%]{position:absolute;background:grey;border-radius:10px;transform-origin:bottom}\"]\n});\n() => {\n  d = new Date(); //object of date()\n  hr = d.getHours();\n  min = d.getMinutes();\n  sec = d.getSeconds();\n  hr_rotation = 30 * hr + min / 2; //converting current time\n  min_rotation = 6 * min;\n  sec_rotation = 6 * sec;\n  hour.style.transform = `rotate(${hr_rotation}deg)`;\n  minute.style.transform = `rotate(${min_rotation}deg)`;\n  second.style.transform = `rotate(${sec_rotation}deg)`;\n}, 1000;\n;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}