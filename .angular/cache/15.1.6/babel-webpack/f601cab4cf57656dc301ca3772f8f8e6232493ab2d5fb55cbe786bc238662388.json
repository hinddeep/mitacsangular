{"ast":null,"code":"import { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function repeatWhen(notifier) {\n  return operate((source, subscriber) => {\n    let innerSub;\n    let syncResub = false;\n    let completions$;\n    let isNotifierComplete = false;\n    let isMainComplete = false;\n    const checkComplete = () => isMainComplete && isNotifierComplete && (subscriber.complete(), true);\n    const getCompletionSubject = () => {\n      if (!completions$) {\n        completions$ = new Subject();\n        notifier(completions$).subscribe(new OperatorSubscriber(subscriber, () => {\n          if (innerSub) {\n            subscribeForRepeatWhen();\n          } else {\n            syncResub = true;\n          }\n        }, () => {\n          isNotifierComplete = true;\n          checkComplete();\n        }));\n      }\n      return completions$;\n    };\n    const subscribeForRepeatWhen = () => {\n      isMainComplete = false;\n      innerSub = source.subscribe(new OperatorSubscriber(subscriber, undefined, () => {\n        isMainComplete = true;\n        !checkComplete() && getCompletionSubject().next();\n      }));\n      if (syncResub) {\n        innerSub.unsubscribe();\n        innerSub = null;\n        syncResub = false;\n        subscribeForRepeatWhen();\n      }\n    };\n    subscribeForRepeatWhen();\n  });\n}","map":{"version":3,"names":["Subject","operate","OperatorSubscriber","repeatWhen","notifier","source","subscriber","innerSub","syncResub","completions$","isNotifierComplete","isMainComplete","checkComplete","complete","getCompletionSubject","subscribe","subscribeForRepeatWhen","undefined","next","unsubscribe"],"sources":["/Users/hinddeeppurohit/Documents/MitacsAngular/node_modules/rxjs/dist/esm/internal/operators/repeatWhen.js"],"sourcesContent":["import { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function repeatWhen(notifier) {\n    return operate((source, subscriber) => {\n        let innerSub;\n        let syncResub = false;\n        let completions$;\n        let isNotifierComplete = false;\n        let isMainComplete = false;\n        const checkComplete = () => isMainComplete && isNotifierComplete && (subscriber.complete(), true);\n        const getCompletionSubject = () => {\n            if (!completions$) {\n                completions$ = new Subject();\n                notifier(completions$).subscribe(new OperatorSubscriber(subscriber, () => {\n                    if (innerSub) {\n                        subscribeForRepeatWhen();\n                    }\n                    else {\n                        syncResub = true;\n                    }\n                }, () => {\n                    isNotifierComplete = true;\n                    checkComplete();\n                }));\n            }\n            return completions$;\n        };\n        const subscribeForRepeatWhen = () => {\n            isMainComplete = false;\n            innerSub = source.subscribe(new OperatorSubscriber(subscriber, undefined, () => {\n                isMainComplete = true;\n                !checkComplete() && getCompletionSubject().next();\n            }));\n            if (syncResub) {\n                innerSub.unsubscribe();\n                innerSub = null;\n                syncResub = false;\n                subscribeForRepeatWhen();\n            }\n        };\n        subscribeForRepeatWhen();\n    });\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,YAAY;AACpC,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,kBAAkB,QAAQ,sBAAsB;AACzD,OAAO,SAASC,UAAU,CAACC,QAAQ,EAAE;EACjC,OAAOH,OAAO,CAAC,CAACI,MAAM,EAAEC,UAAU,KAAK;IACnC,IAAIC,QAAQ;IACZ,IAAIC,SAAS,GAAG,KAAK;IACrB,IAAIC,YAAY;IAChB,IAAIC,kBAAkB,GAAG,KAAK;IAC9B,IAAIC,cAAc,GAAG,KAAK;IAC1B,MAAMC,aAAa,GAAG,MAAMD,cAAc,IAAID,kBAAkB,KAAKJ,UAAU,CAACO,QAAQ,EAAE,EAAE,IAAI,CAAC;IACjG,MAAMC,oBAAoB,GAAG,MAAM;MAC/B,IAAI,CAACL,YAAY,EAAE;QACfA,YAAY,GAAG,IAAIT,OAAO,EAAE;QAC5BI,QAAQ,CAACK,YAAY,CAAC,CAACM,SAAS,CAAC,IAAIb,kBAAkB,CAACI,UAAU,EAAE,MAAM;UACtE,IAAIC,QAAQ,EAAE;YACVS,sBAAsB,EAAE;UAC5B,CAAC,MACI;YACDR,SAAS,GAAG,IAAI;UACpB;QACJ,CAAC,EAAE,MAAM;UACLE,kBAAkB,GAAG,IAAI;UACzBE,aAAa,EAAE;QACnB,CAAC,CAAC,CAAC;MACP;MACA,OAAOH,YAAY;IACvB,CAAC;IACD,MAAMO,sBAAsB,GAAG,MAAM;MACjCL,cAAc,GAAG,KAAK;MACtBJ,QAAQ,GAAGF,MAAM,CAACU,SAAS,CAAC,IAAIb,kBAAkB,CAACI,UAAU,EAAEW,SAAS,EAAE,MAAM;QAC5EN,cAAc,GAAG,IAAI;QACrB,CAACC,aAAa,EAAE,IAAIE,oBAAoB,EAAE,CAACI,IAAI,EAAE;MACrD,CAAC,CAAC,CAAC;MACH,IAAIV,SAAS,EAAE;QACXD,QAAQ,CAACY,WAAW,EAAE;QACtBZ,QAAQ,GAAG,IAAI;QACfC,SAAS,GAAG,KAAK;QACjBQ,sBAAsB,EAAE;MAC5B;IACJ,CAAC;IACDA,sBAAsB,EAAE;EAC5B,CAAC,CAAC;AACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}