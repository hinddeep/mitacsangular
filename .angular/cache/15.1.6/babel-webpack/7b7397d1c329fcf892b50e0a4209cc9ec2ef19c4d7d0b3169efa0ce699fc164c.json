{"ast":null,"code":"import { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function every(predicate, thisArg) {\n  return operate((source, subscriber) => {\n    let index = 0;\n    source.subscribe(new OperatorSubscriber(subscriber, value => {\n      if (!predicate.call(thisArg, value, index++, source)) {\n        subscriber.next(false);\n        subscriber.complete();\n      }\n    }, () => {\n      subscriber.next(true);\n      subscriber.complete();\n    }));\n  });\n}","map":{"version":3,"names":["operate","OperatorSubscriber","every","predicate","thisArg","source","subscriber","index","subscribe","value","call","next","complete"],"sources":["/Users/hinddeeppurohit/Documents/MitacsAngular/node_modules/rxjs/dist/esm/internal/operators/every.js"],"sourcesContent":["import { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nexport function every(predicate, thisArg) {\n    return operate((source, subscriber) => {\n        let index = 0;\n        source.subscribe(new OperatorSubscriber(subscriber, (value) => {\n            if (!predicate.call(thisArg, value, index++, source)) {\n                subscriber.next(false);\n                subscriber.complete();\n            }\n        }, () => {\n            subscriber.next(true);\n            subscriber.complete();\n        }));\n    });\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,cAAc;AACtC,SAASC,kBAAkB,QAAQ,sBAAsB;AACzD,OAAO,SAASC,KAAK,CAACC,SAAS,EAAEC,OAAO,EAAE;EACtC,OAAOJ,OAAO,CAAC,CAACK,MAAM,EAAEC,UAAU,KAAK;IACnC,IAAIC,KAAK,GAAG,CAAC;IACbF,MAAM,CAACG,SAAS,CAAC,IAAIP,kBAAkB,CAACK,UAAU,EAAGG,KAAK,IAAK;MAC3D,IAAI,CAACN,SAAS,CAACO,IAAI,CAACN,OAAO,EAAEK,KAAK,EAAEF,KAAK,EAAE,EAAEF,MAAM,CAAC,EAAE;QAClDC,UAAU,CAACK,IAAI,CAAC,KAAK,CAAC;QACtBL,UAAU,CAACM,QAAQ,EAAE;MACzB;IACJ,CAAC,EAAE,MAAM;MACLN,UAAU,CAACK,IAAI,CAAC,IAAI,CAAC;MACrBL,UAAU,CAACM,QAAQ,EAAE;IACzB,CAAC,CAAC,CAAC;EACP,CAAC,CAAC;AACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}